---

const base = import.meta.env.BASE_URL === "/" ? "" : import.meta.env.BASE_URL;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href={ base + "/favicon.svg" } />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Rust Browser Interpreter</title>
	</head>
	<body>
		<div id="grid">
			<div>
				<h1><span>Ru</span>st <span>Br</span>owser <span>I</span>nterpreter</h1>
				<b><a href="https://github.com/lyonsyonii/rubri" target="_blank">See on Github</a></b>
			</div>
			<div id="live-edit-wrapper">
				<input id="live-edit" type="checkbox" checked />
				<label for="live-edit">Live Edit</label>
				<input id="print-last" type="checkbox" checked />
				<label for="print-last">Print last expression</label>
				<br><br>
				<button id="button-run">
					<b>RUN</b>
					<svg class="bwriTBp9mt3lT3cYfTnK" height="14" viewBox="8 4 10 16" width="12" xmlns="http://www.w3.org/2000/svg"><path d="M8 5v14l11-7z"></path></svg>
				</button>
				<b> Or Ctrl+Enter</b>
			</div>
			<textarea id="input" spellcheck="false" placeholder="Write your code..." readonly />
			<div id="terminal">
				<div id="terminal-inner" />
			</div>
		</div>
	</body>
</html>

<style>
	body {
		height: 100vh;
		font-family: 'Courier New', Courier, monospace;
		margin: 0;
		padding: 0;
	}
	#grid {
		height: calc(100% - 1rem);
		margin-left: 1rem;
		margin-right: 1rem;
		display: grid;
		grid-template-rows: min-content min-content 1fr 1fr;
		gap: .5rem;
	}
	#button-run {
		padding-left: 1.25em;
		padding-right: 1.25em;
		padding-top: .5em;
		padding-bottom: .5em;
		display: inline-flex;
		align-items: center;
		gap: 0.5em;
		background: white;
		border-color: #676774;
		border-width: 1px;
		border-style: solid;
		border-radius: 2px;
		cursor: pointer;
	}
	#button-run[disabled] {
		opacity: 0.5;
	}
	#button-run > b {
		font-family: inherit;
		font-weight: 700;
		font-size: large;
	}
	textarea#input {
		font-size: x-large;
		resize: none;
	}
	#terminal {
		overflow: scroll;
	}
	#terminal-inner {
		white-space: pre-wrap;
	}
	#live-edit, #live-edit-wrapper {
		user-select: none;
	}
	span {
		text-decoration: underline;
	}
</style>

<script>
	import { Interpreter } from "../interpreter";
	import { setupEditor } from "../editor";
	import { AnsiUp } from "ansi_up";
	
	const input = document.body.querySelector<HTMLTextAreaElement>("textarea#input")!;
	const runButton = document.body.querySelector<HTMLButtonElement>("button")!;
	const liveEdit = document.body.querySelector<HTMLInputElement>("#live-edit")!;
	const printLast = document.body.querySelector<HTMLInputElement>("#print-last")!;
	const termElement = document.getElementById("terminal")!;
	const termInnerElement = document.getElementById("terminal-inner")!;

	// Interpreter initialization
	let lastInput = "";
	const interpreter = new Interpreter();

	// Setup editor
	input.readOnly = true;
	termInnerElement.innerHTML = "Downloading (Can take a while):";
	setupEditor(input, runButton);

	// Add libraries downloaded to list
	interpreter.onAssetDownloaded(lib => termInnerElement.innerHTML += `\n${lib}`);

	// When Interpreter has finished loading, add default code
	interpreter.onLoaded(() => {
		input.readOnly = false;
		const v = localStorage.getItem("code-input");
		if (v) {
			input.value = v;
			termInnerElement.innerHTML = "";
		} else {
			input.value = 'println!("Hello from WASM!");';
			runButton.click();
		}
	});

	// When Interpreter is running disable the "Run" button
	interpreter.onRun(() => {
		runButton.disabled = true;
		termInnerElement.innerHTML = "Running...";
	});

	// When result is received from a running Interpreter write it to the terminal
	const ansiUp = new AnsiUp();
	interpreter.onResult(result => {
		termInnerElement.innerHTML = ansiUp.ansi_to_html(result.replaceAll("\n", "\r"));
		runButton.disabled = false;
		if (lastInput && lastInput !== input.value) {
			input.dispatchEvent(new Event("input"));
		} else {
			localStorage.setItem("code-input", input.value);
		}
	});

	// Run the Interpreter when on "Live Edit" or the "Run" button is clicked
	input.addEventListener("input", async () => {
		if (!liveEdit.checked || runButton.disabled) {
			return;
		}
		lastInput = input.value;
		interpreter.run(input.value || "", printLast.checked);
	});
	runButton.addEventListener("click", async () => {
		if (runButton.disabled) {
			return;
		}
		interpreter.run(input.value || "", printLast.checked)
	});
</script>